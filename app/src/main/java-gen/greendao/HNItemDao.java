package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.HNItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HNITEM.
*/
public class HNItemDao extends AbstractDao<HNItem, Integer> {

    public static final String TABLENAME = "HNITEM";

    /**
     * Properties of entity HNItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property By = new Property(1, String.class, "by", false, "BY");
        public final static Property Id = new Property(2, Integer.class, "id", true, "ID");
        public final static Property Kids = new Property(3, String.class, "kids", false, "KIDS");
        public final static Property Score = new Property(4, Integer.class, "score", false, "SCORE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    };


    public HNItemDao(DaoConfig config) {
        super(config);
    }
    
    public HNItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HNITEM' (" + //
                "'TITLE' TEXT," + // 0: title
                "'BY' TEXT," + // 1: by
                "'ID' INTEGER PRIMARY KEY ," + // 2: id
                "'KIDS' TEXT," + // 3: kids
                "'SCORE' INTEGER," + // 4: score
                "'TIME' TEXT," + // 5: time
                "'TYPE' TEXT," + // 6: type
                "'URL' TEXT);"); // 7: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HNITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HNItem entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String by = entity.getBy();
        if (by != null) {
            stmt.bindString(2, by);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String kids = entity.getKids();
        if (kids != null) {
            stmt.bindString(4, kids);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(5, score);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public HNItem readEntity(Cursor cursor, int offset) {
        HNItem entity = new HNItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // by
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kids
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // score
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HNItem entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBy(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setKids(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScore(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(HNItem entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(HNItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
